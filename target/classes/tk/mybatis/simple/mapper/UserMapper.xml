<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
    <cache-ref namespace="tk.mybatis.simple.mapper.RoleMapper"/>
    <cache/>
    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id"></id>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>
    <!--利用MBG逆向工程生成基础Map之后继承基础map再添加映射对象结果集-->
    <resultMap id="userRoleMap" type="tk.mybatis.simple.model.SysUser" extends="userMap">
        <!--association标签作用：
        property:对应实体类的属性名，必填
        javaType:属性对应的java类型
        resultMap:直接使用现有的resultMap,此处不需要配置
        columnPrefix:查询列前缀，子标签的column属性配置时可以省略前缀，但是在写sql时必须都加上前缀-->
        <association property="sysRole" columnPrefix="role_"    javaType="tk.mybatis.simple.model.SysRole">
            <result property="sysRole.id"  column="role_id"/>
            <result property="sysRole.roleName" column="role_name"/>
            <result property="sysRole.enabled"  column="enabled"/>
            <result property="sysRole.createBy"    column="create_by"/>
            <result property="sysRole.createTime"  column="create_time" jdbcType="TIMESTAMP"/>
        </association>
    </resultMap>

    <!--直接提取映射对象-->
<!--    <resultMap id="RoleMap" type="tk.mybatis.simple.model.SysRole">
        <result property="id"  column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="enabled"  column="enabled"/>
        <result property="createBy"    column="create_by"/>
        <result property="createTime"  column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="userRoleMap" type="tk.mybatis.simple.model.SysUser" extends="userMap">
        <association property="sysRole" columnPrefix="role_" resultMap="RoleMap" >
        </association>
    </resultMap>-->

    <resultMap id="userRoleListMap" type="tk.mybatis.simple.model.SysUser" extends="userMap">
        <collection property="roleList" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap">
        </collection>
    </resultMap>

    <resultMap id="userRoleListMapSelect" type="tk.mybatis.simple.model.SysUser" extends="userMap">
        <collection property="roleList" fetchType="lazy" select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"
                    column="{userId=id}"/>
    </resultMap>

    <select id="selectById" flushCache="true" resultMap="userMap">
        select * from sys_user where id = #{id}
    </select>

    <select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
        select id,
               user_name userName,
               user_password userPassword,
               user_email userEmail,
               user_info userInfo,
               head_img headImg,
               create_time createTime
        from sys_user
    </select>

    <select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime,
            u.user_name as "user.userName",
            u.user_email as "user.userEmail"
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>

    <insert id="insert">
        insert into sys_user(
           id,user_name,user_password,user_email,user_info,head_img,create_time)
           values (
            #{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType= TIMESTAMP}
        )
    </insert>

    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
            id,user_name,user_password,user_email,user_info,head_img,create_time)
        values (
                   #{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType= TIMESTAMP}
               )
    </insert>

    <!--selectKey返回主键的值，无论是数据库自动生成的主键，还是不提供主键自增功能的数据库都适用-->
<!--    -->
    <insert id="insert3">
        insert into sys_user(
            id,user_name,user_password,user_email,user_info,head_img,create_time)
        values (
                   #{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType= TIMESTAMP}
               )
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="updateById">
        update sys_user set user_name = #{userName},
                            user_password = #{userPassword},
                            user_email = #{userEmail},
                            user_info = #{userInfo},
                            head_img = #{headImg, jdbcType = BLOB},
                            create_time = #{createTime, jdbcType = TIMESTAMP}
        where id = #{id}
    </update>

    <delete id="deleteById">
        delete from sys_user where id = #{id}
    </delete>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime
        from sys_user u
                 inner join sys_user_role ur on u.id = ur.user_id
                 inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId} and r.enabled = #{enabled}
    </select>

    <select id="selectByUser" databaseId="mysql" resultType="tk.mybatis.simple.model.SysUser">
        select id,
               user_name userName,
               user_password userPassword,
               user_email userEmail,
               user_info userInfo,
               head_img headImg,
               create_time createTime
        from sys_user
        where 1 = 1
        <if test="userName != null and userName != ''">
<!--            <bind name="userNameLike" value="'%'+ userName + '%'"/>-->
<!--            and user_name like #{userNameLike}-->
            and user_name like concat('%',#{userName},'%')
        </if>

        <if test="userEmail != null and userEmail !=''">
            and user_email = #{userEmail}
        </if>
    </select>

    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        select id,
               user_name userName,
               user_password userPassword,
               user_email userEmail,
               user_info userInfo,
               head_img headImg,
               create_time createTime
        from sys_user
        where 1=1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName !=null and userName !=''">
                and user_name = #{userName}
            </when>
            <otherwise>
             and  1 = 2
            </otherwise>
        </choose>
    </select>


    <!--去除where 1=1的写法-->
<!--    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        <where>
            <if test="userName != null and userName != ''">
                and user_name like concat('%',#{userName},'%')
            </if>
            <if test="userEmail != null and userEmail !=''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>-->

    <!--foreach实现in集合查询  如果入参不是List集合而是array数组时需要将collection设置为array，如果出现多个参数可以使用@Param-->
    <select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where id in
        <foreach collection="list" open="(" close=")" separator="," index="i" item="id">
            #{id}
        </foreach>
    </select>
    <!--批量插入，返回自增主键值可以加入useGeneratedKeys属性-->
    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        insert into sys_suer(user_name,user_password,user_email,user_info,head_img,create_time)
        values
        <foreach collection="list" item="user" separator=",">
            (#{user.userName},#{user.userPassword},#{user.userEmail},#{user.userInfo},#{user.headImg,jdbcType=BLOB},#{user.createTime,jdbcType=TIMESTAMP})
        </foreach>
    </insert>

    <!--当参数类型为Map，foreach标签的index标签不再是索引值，而是map的key，可以利用这个key实现动态update-->
    <update id="updateByMap">
        update sys_user
        set
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>

    <select id="selectUserAndRoleById" resultType="tk.mybatis.simple.model.SysUser">
        select u.id,u.user_name userName,u.user_password userPassword,u.user_email userEmail,
               u.user_info userInfo,u.head_img headImg,u.create_time createTime,r.id "sysRole.id",
               r.role_name "sysRole.roleName",r.enabled "sysRole.enabled",r.create_by "sysRole.createBy",
               r.create_time "sysRole.createTime"
        from sys_user u
        inner join sys_user_role ur on ur.user_id = u.id
        inner join sys_role r on r.id = ur.role_id
        where u.id = #{id}
    </select>

    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        select u.id,u.user_name,u.user_password ,u.user_email,
               u.user_info,u.head_img,u.create_time,r.id role_id,
               r.role_name role_role_name,r.enabled role_eanbled,r.create_by role_create_by,
               r.create_time role_create_time
        from sys_user u
                 inner join sys_user_role ur on ur.user_id = u.id
                 inner join sys_role r on r.id = ur.role_id
        where u.id = #{id}
    </select>


    <!--嵌套查询,启用懒加载，只有在调用了sysRole对象的时候才会被加载-->
    <resultMap id="userRoleMapSelect" type="tk.mybatis.simple.model.SysUser" extends="userMap">
        <association property="sysRole" column="{id=role_id}"
                     select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById" fetchType="lazy"/>
    </resultMap>

    <!--主查询，查询出role_id之后，将role_id的结果传递给嵌套查询selectRoleById通过{id=role_id}，将role_id赋值给嵌套查询的参数id-->
    <select id="selectUserAndRoleByIdSelect"    resultMap="userRoleMapSelect">
        select u.id,u.user_name,u.user_password,u.user_email,u.user_info,u.head_img,u.create_time,
               ur.role_id from sys_user u
        inner join sys_user_role ur on ur.user_id = u.id
        where u.id = #{id}
    </select>

    <!--一对多映射结果集查询-->
    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        select u.id,u.user_name,u.user_password ,u.user_email,
               u.user_info,u.head_img,u.create_time,r.id role_id,
               r.role_name role_role_name,r.enabled role_eanbled,r.create_by role_create_by,
               r.create_time role_create_time,
               p.id role_privilege_id,p.privilege_name role_privilege_privilege_name,
               p.privilege_url role_privilege_privilege_rul
        from sys_user u
                 inner join sys_user_role ur on ur.user_id = u.id
                 inner join sys_role r on r.id = ur.role_id
                 inner join sys_role_privilege rp on rp.role_id = r.id
                 inner join sys_privilege p on p.id = rp.privilege_id
    </select>

    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        select u.id,u.user_name,u.user_password,u.user_email,u.user_info,u.head_img,
               u.create_time
        from sys_user u
        where u.id = #{id}
    </select>


    <!--存储过程,sql类型为callable,存储过程用不上mybatis二级缓存，防止某些错误故设置为false-->
    <select id="selectUserById" statementType="CALLABLE" useCache="false">
        {call select_user_by_id(
            #{id,mode=IN},
            #{userName,mode = OUT,jdbcType=VARCHAR},
            #{userPassword,mode=OUT,jdbcType=VARCHAR},
            #{userEmail,mode=OUT, jdbcType=VARCHAR},
            #{userInfo,mode=OUT,jdbcType=VARCHAR},
            #{headImg,mode=OUT,jdbcType=BLOB,javaType=_byte[]},
            #{createTime,mode=OUT,jdbcType=TIMESTAMP}
            )}
    </select>

    <!--调用存储过程，使用Map接受返回参数-->
    <select id="selectUserPage" statementType="CALLABLE"    useCache="false" resultMap="userMap">
        {call select_user_page(
            #{userName,mode=IN},
            #{offset,mode=IN},
            #{limit,mode=IN},
            #{total,mode=OUT,jdbcType=BIGINT}
            )}
    </select>

    <select id="insertUserAndRoles" statementType="CALLABLE">
        {call insert_user_and_roles(
            #{user.id,mode=OUT,jdbcType=BIGINT},
            #{user.userName,mode=IN},
            #{user.userPassword,mode=IN},
            #{user.userEmail,mode=IN},
            #{user.userInfo,mode=IN},
            #{user.headImg,mode=IN,jdbcType=BLOB},
            #{user.createTime,mode=OUT,jdbcType=TIMESTAMP},
            #{roleIds,mode=IN}
            )}
    </select>

    <delete id="deleteUserById" statementType="CALLABLE">
        {call delete_user_by_id(#{id,mode=IN})}
    </delete>

    <select id="selectMapById" parameterType="Long" resultType="java.util.Map">
        select   user_name,
                 user_password,
                 user_email,
                 user_info,
                 head_img,
                 create_time from sys_user where id = #{id}
    </select>
</mapper>
